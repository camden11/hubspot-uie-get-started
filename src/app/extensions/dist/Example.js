(function(React2, react) {
  "use strict";
  react.createRemoteReactComponent("Alert");
  const Button = react.createRemoteReactComponent("Button");
  react.createRemoteReactComponent("ButtonRow");
  react.createRemoteReactComponent("Card");
  react.createRemoteReactComponent("DescriptionList");
  react.createRemoteReactComponent("DescriptionListItem");
  const Divider = react.createRemoteReactComponent("Divider");
  react.createRemoteReactComponent("EmptyState");
  react.createRemoteReactComponent("ErrorState");
  react.createRemoteReactComponent("Form");
  react.createRemoteReactComponent("Heading");
  react.createRemoteReactComponent("Image");
  const Input = react.createRemoteReactComponent("Input");
  react.createRemoteReactComponent("Textarea");
  react.createRemoteReactComponent("LoadingSpinner");
  react.createRemoteReactComponent("ProgressBar");
  react.createRemoteReactComponent("Select");
  react.createRemoteReactComponent("Tag");
  const Text = react.createRemoteReactComponent("Text");
  react.createRemoteReactComponent("Tile");
  react.createRemoteReactComponent("ToggleGroup");
  const Stack = react.createRemoteReactComponent("Stack");
  react.createRemoteReactComponent("StatisticsItem");
  react.createRemoteReactComponent("Statistics");
  react.createRemoteReactComponent("StatisticsTrend");
  react.createRemoteReactComponent("Table");
  react.createRemoteReactComponent("TableFooter");
  react.createRemoteReactComponent("TableCell");
  react.createRemoteReactComponent("TableRow");
  react.createRemoteReactComponent("TableBody");
  react.createRemoteReactComponent("TableHeader");
  react.createRemoteReactComponent("TableHead");
  const Link = react.createRemoteReactComponent("Link");
  react.createRemoteReactComponent("NumberInput");
  react.createRemoteReactComponent("Box");
  const hubspot = {
    extend: render
  };
  const extend = (...args) => self.extend(...args);
  function render(renderCallback) {
    return extend((root, api) => {
      const renderCallbackResult = renderCallback(api);
      if (!React2.isValidElement(renderCallbackResult)) {
        throw new Error(`[hubspot.extend]: Expected callback function to return a valid element, got: ${renderCallbackResult}`);
      }
      react.createRoot(root).render(renderCallbackResult);
      root.mount();
    });
  }
  var ServerlessExecutionStatus;
  (function(ServerlessExecutionStatus2) {
    ServerlessExecutionStatus2["Success"] = "SUCCESS";
    ServerlessExecutionStatus2["Error"] = "ERROR";
  })(ServerlessExecutionStatus || (ServerlessExecutionStatus = {}));
  hubspot.extend(({ context, runServerlessFunction, actions }) => /* @__PURE__ */ React2.createElement(
    Extension,
    {
      context,
      runServerless: runServerlessFunction,
      sendAlert: actions.addAlert
    }
  ));
  const Extension = ({ context, runServerless, sendAlert }) => {
    const [text, setText] = React2.useState("");
    const run = () => {
      runServerless({ name: "myFunc", parameters: { text } }).then(
        (resp) => sendAlert({ message: resp.response })
      );
    };
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Text, null, /* @__PURE__ */ React2.createElement(Text, { format: { fontWeight: "bold" } }, "Your first UI extension is ready!"), "Congratulations, ", context.user.firstName, "! You just deployed your first HubSpot UI extension. This example demonstrates how you would send parameters from your React frontend to the serverless function and get a response back."), /* @__PURE__ */ React2.createElement(Stack, null, /* @__PURE__ */ React2.createElement(Input, { name: "text", label: "Send", onInput: (t) => setText(t) }), /* @__PURE__ */ React2.createElement(Button, { type: "submit", onClick: run }, "Click me")), /* @__PURE__ */ React2.createElement(Divider, null), /* @__PURE__ */ React2.createElement(Stack, null, /* @__PURE__ */ React2.createElement(Text, null, "What now? Explore all available", " ", " TESTING", /* @__PURE__ */ React2.createElement(Link, { href: "https://developers.hubspot.com/docs/platform/ui-extension-components" }, "UI components"), ", get an overview of", " ", /* @__PURE__ */ React2.createElement(Link, { href: "https://developers.hubspot.com/docs/platform/ui-extensions-overview" }, "UI extensions"), ", learn how to", " ", /* @__PURE__ */ React2.createElement(Link, { href: "https://developers.hubspot.com/docs/platform/create-ui-extensions" }, "add a new custom card"), ", jump right in with our", " ", /* @__PURE__ */ React2.createElement(Link, { href: "https://developers.hubspot.com/docs/platform/ui-extensions-quickstart" }, "Quickstart Guide"), ", or check out our", " ", /* @__PURE__ */ React2.createElement(Link, { href: "https://github.com/HubSpot/ui-extensions-react-examples" }, "code Samples"), ".")));
  };
})(React, RemoteUI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
